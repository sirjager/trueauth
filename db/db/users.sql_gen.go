// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "_users" (id,email,username,hash_salt,hash_pass,firstname,lastname,verified) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion
`

type CreateUserParams struct {
	ID        []byte `json:"id"`
	Email     string `json:"email"`
	Username  string `json:"username"`
	HashSalt  string `json:"hash_salt"`
	HashPass  string `json:"hash_pass"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Verified  bool   `json:"verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.HashSalt,
		arg.HashPass,
		arg.Firstname,
		arg.Lastname,
		arg.Verified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashSalt,
		&i.HashPass,
		&i.Firstname,
		&i.Lastname,
		&i.Verified,
		&i.Blocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenEmailVerify,
		&i.TokenPasswordReset,
		&i.TokenEmailChange,
		&i.TokenUserDeletion,
		&i.LastEmailVerify,
		&i.LastPasswordReset,
		&i.LastEmailChange,
		&i.LastUserDeletion,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from "_users" where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id []byte) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const readUser = `-- name: ReadUser :one
select id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion from "_users" where id = $1 limit 1
`

func (q *Queries) ReadUser(ctx context.Context, id []byte) (User, error) {
	row := q.db.QueryRow(ctx, readUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashSalt,
		&i.HashPass,
		&i.Firstname,
		&i.Lastname,
		&i.Verified,
		&i.Blocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenEmailVerify,
		&i.TokenPasswordReset,
		&i.TokenEmailChange,
		&i.TokenUserDeletion,
		&i.LastEmailVerify,
		&i.LastPasswordReset,
		&i.LastEmailChange,
		&i.LastUserDeletion,
	)
	return i, err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
select id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion from "_users" where email = $1 limit 1
`

func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, readUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashSalt,
		&i.HashPass,
		&i.Firstname,
		&i.Lastname,
		&i.Verified,
		&i.Blocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenEmailVerify,
		&i.TokenPasswordReset,
		&i.TokenEmailChange,
		&i.TokenUserDeletion,
		&i.LastEmailVerify,
		&i.LastPasswordReset,
		&i.LastEmailChange,
		&i.LastUserDeletion,
	)
	return i, err
}

const readUserByUsername = `-- name: ReadUserByUsername :one
select id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion from "_users" where username = $1 limit 1
`

func (q *Queries) ReadUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, readUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashSalt,
		&i.HashPass,
		&i.Firstname,
		&i.Lastname,
		&i.Verified,
		&i.Blocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenEmailVerify,
		&i.TokenPasswordReset,
		&i.TokenEmailChange,
		&i.TokenUserDeletion,
		&i.LastEmailVerify,
		&i.LastPasswordReset,
		&i.LastEmailChange,
		&i.LastUserDeletion,
	)
	return i, err
}

const readUsers = `-- name: ReadUsers :many
select id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion from "_users" limit $2 offset $1
`

type ReadUsersParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) ReadUsers(ctx context.Context, arg ReadUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, readUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.HashSalt,
			&i.HashPass,
			&i.Firstname,
			&i.Lastname,
			&i.Verified,
			&i.Blocked,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TokenEmailVerify,
			&i.TokenPasswordReset,
			&i.TokenEmailChange,
			&i.TokenUserDeletion,
			&i.LastEmailVerify,
			&i.LastPasswordReset,
			&i.LastEmailChange,
			&i.LastUserDeletion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDeletionToken = `-- name: UpdateUserDeletionToken :exec
UPDATE "_users" SET token_user_deletion = $1, last_user_deletion = $2 WHERE id = $3
`

type UpdateUserDeletionTokenParams struct {
	TokenUserDeletion string    `json:"token_user_deletion"`
	LastUserDeletion  time.Time `json:"last_user_deletion"`
	ID                []byte    `json:"id"`
}

func (q *Queries) UpdateUserDeletionToken(ctx context.Context, arg UpdateUserDeletionTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserDeletionToken, arg.TokenUserDeletion, arg.LastUserDeletion, arg.ID)
	return err
}

const updateUserEmailVerificationToken = `-- name: UpdateUserEmailVerificationToken :exec
UPDATE "_users" SET token_email_verify = $1, last_email_verify = $2 WHERE id = $3
`

type UpdateUserEmailVerificationTokenParams struct {
	TokenEmailVerify string    `json:"token_email_verify"`
	LastEmailVerify  time.Time `json:"last_email_verify"`
	ID               []byte    `json:"id"`
}

func (q *Queries) UpdateUserEmailVerificationToken(ctx context.Context, arg UpdateUserEmailVerificationTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserEmailVerificationToken, arg.TokenEmailVerify, arg.LastEmailVerify, arg.ID)
	return err
}

const updateUserEmailVerified = `-- name: UpdateUserEmailVerified :one
UPDATE "_users" SET verified = $1, token_email_verify = $2 WHERE id = $3 RETURNING id, email, username, hash_salt, hash_pass, firstname, lastname, verified, blocked, created_at, updated_at, token_email_verify, token_password_reset, token_email_change, token_user_deletion, last_email_verify, last_password_reset, last_email_change, last_user_deletion
`

type UpdateUserEmailVerifiedParams struct {
	Verified         bool   `json:"verified"`
	TokenEmailVerify string `json:"token_email_verify"`
	ID               []byte `json:"id"`
}

func (q *Queries) UpdateUserEmailVerified(ctx context.Context, arg UpdateUserEmailVerifiedParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmailVerified, arg.Verified, arg.TokenEmailVerify, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.HashSalt,
		&i.HashPass,
		&i.Firstname,
		&i.Lastname,
		&i.Verified,
		&i.Blocked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenEmailVerify,
		&i.TokenPasswordReset,
		&i.TokenEmailChange,
		&i.TokenUserDeletion,
		&i.LastEmailVerify,
		&i.LastPasswordReset,
		&i.LastEmailChange,
		&i.LastUserDeletion,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE "_users" SET hash_pass = $1, hash_salt = $2, last_password_reset = $3 WHERE id = $4
`

type UpdateUserPasswordParams struct {
	HashPass          string    `json:"hash_pass"`
	HashSalt          string    `json:"hash_salt"`
	LastPasswordReset time.Time `json:"last_password_reset"`
	ID                []byte    `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword,
		arg.HashPass,
		arg.HashSalt,
		arg.LastPasswordReset,
		arg.ID,
	)
	return err
}

const updateUserPasswordResetToken = `-- name: UpdateUserPasswordResetToken :exec
UPDATE "_users" SET token_password_reset = $1, last_password_reset = $2 WHERE id = $3
`

type UpdateUserPasswordResetTokenParams struct {
	TokenPasswordReset string    `json:"token_password_reset"`
	LastPasswordReset  time.Time `json:"last_password_reset"`
	ID                 []byte    `json:"id"`
}

func (q *Queries) UpdateUserPasswordResetToken(ctx context.Context, arg UpdateUserPasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserPasswordResetToken, arg.TokenPasswordReset, arg.LastPasswordReset, arg.ID)
	return err
}
