// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO "_sessions" (
  id, 
  refresh_token,
  access_token_id,
  access_token,
  user_id,
  client_ip,
  user_agent,
  blocked,
  access_token_expires_at,
  refresh_token_expires_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	ID                    []byte    `json:"id"`
	RefreshToken          string    `json:"refresh_token"`
	AccessTokenID         []byte    `json:"access_token_id"`
	AccessToken           string    `json:"access_token"`
	UserID                []byte    `json:"user_id"`
	ClientIp              string    `json:"client_ip"`
	UserAgent             string    `json:"user_agent"`
	Blocked               bool      `json:"blocked"`
	AccessTokenExpiresAt  time.Time `json:"access_token_expires_at"`
	RefreshTokenExpiresAt time.Time `json:"refresh_token_expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.RefreshToken,
		arg.AccessTokenID,
		arg.AccessToken,
		arg.UserID,
		arg.ClientIp,
		arg.UserAgent,
		arg.Blocked,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM "_sessions" WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id []byte) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionByAccessTokenID = `-- name: DeleteSessionByAccessTokenID :exec
DELETE FROM "_sessions" WHERE access_token_id = $1
`

func (q *Queries) DeleteSessionByAccessTokenID(ctx context.Context, accessTokenID []byte) error {
	_, err := q.db.Exec(ctx, deleteSessionByAccessTokenID, accessTokenID)
	return err
}

const deleteSessionByUserID = `-- name: DeleteSessionByUserID :exec
DELETE FROM "_sessions" WHERE user_id = $1
`

func (q *Queries) DeleteSessionByUserID(ctx context.Context, userID []byte) error {
	_, err := q.db.Exec(ctx, deleteSessionByUserID, userID)
	return err
}

const readSession = `-- name: ReadSession :one
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM "_sessions" WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadSession(ctx context.Context, id []byte) (Session, error) {
	row := q.db.QueryRow(ctx, readSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readSessionByAccessTokenID = `-- name: ReadSessionByAccessTokenID :one
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM "_sessions" WHERE access_token_id = $1 LIMIT 1
`

func (q *Queries) ReadSessionByAccessTokenID(ctx context.Context, accessTokenID []byte) (Session, error) {
	row := q.db.QueryRow(ctx, readSessionByAccessTokenID, accessTokenID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readSessionsByUserID = `-- name: ReadSessionsByUserID :many
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM "_sessions" WHERE user_id = $1 LIMIT $3 OFFSET $2
`

type ReadSessionsByUserIDParams struct {
	UserID []byte      `json:"user_id"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) ReadSessionsByUserID(ctx context.Context, arg ReadSessionsByUserIDParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, readSessionsByUserID, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.AccessTokenID,
			&i.AccessToken,
			&i.ClientIp,
			&i.UserAgent,
			&i.UserID,
			&i.Blocked,
			&i.AccessTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
