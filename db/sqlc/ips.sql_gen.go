// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: ips.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createIP = `-- name: CreateIP :exec
INSERT INTO ips (account_id, allowed_ips, blocked_ips, token) VALUES ($1, $2, $3, $4)
`

type CreateIPParams struct {
	AccountID  uuid.UUID `json:"account_id"`
	AllowedIps []string  `json:"allowed_ips"`
	BlockedIps []string  `json:"blocked_ips"`
	Token      string    `json:"token"`
}

func (q *Queries) CreateIP(ctx context.Context, arg CreateIPParams) error {
	_, err := q.db.ExecContext(ctx, createIP,
		arg.AccountID,
		pq.Array(arg.AllowedIps),
		pq.Array(arg.BlockedIps),
		arg.Token,
	)
	return err
}

const getIPByAccountID = `-- name: GetIPByAccountID :one
SELECT id, account_id, allowed_ips, blocked_ips, token, created_at, updated_at FROM ips WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetIPByAccountID(ctx context.Context, accountID uuid.UUID) (Ip, error) {
	row := q.db.QueryRowContext(ctx, getIPByAccountID, accountID)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		pq.Array(&i.AllowedIps),
		pq.Array(&i.BlockedIps),
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIPByID = `-- name: GetIPByID :one
SELECT id, account_id, allowed_ips, blocked_ips, token, created_at, updated_at FROM ips WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIPByID(ctx context.Context, id uuid.UUID) (Ip, error) {
	row := q.db.QueryRowContext(ctx, getIPByID, id)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		pq.Array(&i.AllowedIps),
		pq.Array(&i.BlockedIps),
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIP = `-- name: UpdateIP :one
UPDATE ips SET
 allowed_ips = $1,
 blocked_ips = $2,
 token = $3
WHERE id = $4 RETURNING id, account_id, allowed_ips, blocked_ips, token, created_at, updated_at
`

type UpdateIPParams struct {
	AllowedIps []string  `json:"allowed_ips"`
	BlockedIps []string  `json:"blocked_ips"`
	Token      string    `json:"token"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateIP(ctx context.Context, arg UpdateIPParams) (Ip, error) {
	row := q.db.QueryRowContext(ctx, updateIP,
		pq.Array(arg.AllowedIps),
		pq.Array(arg.BlockedIps),
		arg.Token,
		arg.ID,
	)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		pq.Array(&i.AllowedIps),
		pq.Array(&i.BlockedIps),
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIPTokenByAccountID = `-- name: UpdateIPTokenByAccountID :one
UPDATE ips SET token = $1 WHERE account_id = $2 RETURNING id, account_id, allowed_ips, blocked_ips, token, created_at, updated_at
`

type UpdateIPTokenByAccountIDParams struct {
	Token     string    `json:"token"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) UpdateIPTokenByAccountID(ctx context.Context, arg UpdateIPTokenByAccountIDParams) (Ip, error) {
	row := q.db.QueryRowContext(ctx, updateIPTokenByAccountID, arg.Token, arg.AccountID)
	var i Ip
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		pq.Array(&i.AllowedIps),
		pq.Array(&i.BlockedIps),
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
