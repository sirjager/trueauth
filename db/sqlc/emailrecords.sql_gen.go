// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: emailrecords.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEmailRecord = `-- name: CreateEmailRecord :one
INSERT INTO emailrecords (
    email, user_id, verified, code, code_expires_at
) VALUES ($1, $2, $3, $4, $5) RETURNING id, email, user_id, verified, code, code_expires_at, created_at, updated_at
`

type CreateEmailRecordParams struct {
	Email         string    `json:"email"`
	UserID        uuid.UUID `json:"user_id"`
	Verified      bool      `json:"verified"`
	Code          string    `json:"code"`
	CodeExpiresAt time.Time `json:"code_expires_at"`
}

func (q *Queries) CreateEmailRecord(ctx context.Context, arg CreateEmailRecordParams) (Emailrecord, error) {
	row := q.db.QueryRowContext(ctx, createEmailRecord,
		arg.Email,
		arg.UserID,
		arg.Verified,
		arg.Code,
		arg.CodeExpiresAt,
	)
	var i Emailrecord
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserID,
		&i.Verified,
		&i.Code,
		&i.CodeExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailRecord = `-- name: GetEmailRecord :one
SELECT id, email, user_id, verified, code, code_expires_at, created_at, updated_at FROM emailrecords WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmailRecord(ctx context.Context, id uuid.UUID) (Emailrecord, error) {
	row := q.db.QueryRowContext(ctx, getEmailRecord, id)
	var i Emailrecord
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserID,
		&i.Verified,
		&i.Code,
		&i.CodeExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmailRecord = `-- name: UpdateEmailRecord :one
UPDATE emailrecords SET
 verified = $1,
 code = $2,
 code_expires_at = $3
WHERE id = $4 RETURNING id, email, user_id, verified, code, code_expires_at, created_at, updated_at
`

type UpdateEmailRecordParams struct {
	Verified      bool      `json:"verified"`
	Code          string    `json:"code"`
	CodeExpiresAt time.Time `json:"code_expires_at"`
	ID            uuid.UUID `json:"id"`
}

func (q *Queries) UpdateEmailRecord(ctx context.Context, arg UpdateEmailRecordParams) (Emailrecord, error) {
	row := q.db.QueryRowContext(ctx, updateEmailRecord,
		arg.Verified,
		arg.Code,
		arg.CodeExpiresAt,
		arg.ID,
	)
	var i Emailrecord
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserID,
		&i.Verified,
		&i.Code,
		&i.CodeExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
