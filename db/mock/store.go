// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sirjager/trueauth/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sqlc "github.com/sirjager/trueauth/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create_Session mocks base method.
func (m *MockStore) Create_Session(arg0 context.Context, arg1 sqlc.Create_SessionParams) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create_Session", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create_Session indicates an expected call of Create_Session.
func (mr *MockStoreMockRecorder) Create_Session(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create_Session", reflect.TypeOf((*MockStore)(nil).Create_Session), arg0, arg1)
}

// Create_User mocks base method.
func (m *MockStore) Create_User(arg0 context.Context, arg1 sqlc.Create_UserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create_User", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create_User indicates an expected call of Create_User.
func (mr *MockStoreMockRecorder) Create_User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create_User", reflect.TypeOf((*MockStore)(nil).Create_User), arg0, arg1)
}

// Create_UserTx mocks base method.
func (m *MockStore) Create_UserTx(arg0 context.Context, arg1 sqlc.Create_UserTxParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create_UserTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create_UserTx indicates an expected call of Create_UserTx.
func (mr *MockStoreMockRecorder) Create_UserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create_UserTx", reflect.TypeOf((*MockStore)(nil).Create_UserTx), arg0, arg1)
}

// Delete_Session mocks base method.
func (m *MockStore) Delete_Session(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete_Session", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete_Session indicates an expected call of Delete_Session.
func (mr *MockStoreMockRecorder) Delete_Session(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete_Session", reflect.TypeOf((*MockStore)(nil).Delete_Session), arg0, arg1)
}

// Delete_Session_ByUserID mocks base method.
func (m *MockStore) Delete_Session_ByUserID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete_Session_ByUserID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete_Session_ByUserID indicates an expected call of Delete_Session_ByUserID.
func (mr *MockStoreMockRecorder) Delete_Session_ByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete_Session_ByUserID", reflect.TypeOf((*MockStore)(nil).Delete_Session_ByUserID), arg0, arg1)
}

// Delete_User mocks base method.
func (m *MockStore) Delete_User(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete_User", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete_User indicates an expected call of Delete_User.
func (mr *MockStoreMockRecorder) Delete_User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete_User", reflect.TypeOf((*MockStore)(nil).Delete_User), arg0, arg1)
}

// Read_Session_ByAccessTokenID mocks base method.
func (m *MockStore) Read_Session_ByAccessTokenID(arg0 context.Context, arg1 uuid.UUID) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_Session_ByAccessTokenID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_Session_ByAccessTokenID indicates an expected call of Read_Session_ByAccessTokenID.
func (mr *MockStoreMockRecorder) Read_Session_ByAccessTokenID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_Session_ByAccessTokenID", reflect.TypeOf((*MockStore)(nil).Read_Session_ByAccessTokenID), arg0, arg1)
}

// Read_Session_ByID mocks base method.
func (m *MockStore) Read_Session_ByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_Session_ByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_Session_ByID indicates an expected call of Read_Session_ByID.
func (mr *MockStoreMockRecorder) Read_Session_ByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_Session_ByID", reflect.TypeOf((*MockStore)(nil).Read_Session_ByID), arg0, arg1)
}

// Read_Sessions_ByUserID mocks base method.
func (m *MockStore) Read_Sessions_ByUserID(arg0 context.Context, arg1 sqlc.Read_Sessions_ByUserIDParams) ([]sqlc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_Sessions_ByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_Sessions_ByUserID indicates an expected call of Read_Sessions_ByUserID.
func (mr *MockStoreMockRecorder) Read_Sessions_ByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_Sessions_ByUserID", reflect.TypeOf((*MockStore)(nil).Read_Sessions_ByUserID), arg0, arg1)
}

// Read_User_ByEmail mocks base method.
func (m *MockStore) Read_User_ByEmail(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_User_ByEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_User_ByEmail indicates an expected call of Read_User_ByEmail.
func (mr *MockStoreMockRecorder) Read_User_ByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_User_ByEmail", reflect.TypeOf((*MockStore)(nil).Read_User_ByEmail), arg0, arg1)
}

// Read_User_ByID mocks base method.
func (m *MockStore) Read_User_ByID(arg0 context.Context, arg1 uuid.UUID) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_User_ByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_User_ByID indicates an expected call of Read_User_ByID.
func (mr *MockStoreMockRecorder) Read_User_ByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_User_ByID", reflect.TypeOf((*MockStore)(nil).Read_User_ByID), arg0, arg1)
}

// Read_User_ByUsername mocks base method.
func (m *MockStore) Read_User_ByUsername(arg0 context.Context, arg1 string) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_User_ByUsername", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_User_ByUsername indicates an expected call of Read_User_ByUsername.
func (mr *MockStoreMockRecorder) Read_User_ByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_User_ByUsername", reflect.TypeOf((*MockStore)(nil).Read_User_ByUsername), arg0, arg1)
}

// Read_Users mocks base method.
func (m *MockStore) Read_Users(arg0 context.Context, arg1 sqlc.Read_UsersParams) ([]sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read_Users", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read_Users indicates an expected call of Read_Users.
func (mr *MockStoreMockRecorder) Read_Users(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read_Users", reflect.TypeOf((*MockStore)(nil).Read_Users), arg0, arg1)
}

// Update_User mocks base method.
func (m *MockStore) Update_User(arg0 context.Context, arg1 sqlc.Update_UserParams) (sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update_User indicates an expected call of Update_User.
func (mr *MockStoreMockRecorder) Update_User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User", reflect.TypeOf((*MockStore)(nil).Update_User), arg0, arg1)
}

// Update_User_AllowIP mocks base method.
func (m *MockStore) Update_User_AllowIP(arg0 context.Context, arg1 sqlc.Update_User_AllowIPParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_AllowIP", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_AllowIP indicates an expected call of Update_User_AllowIP.
func (mr *MockStoreMockRecorder) Update_User_AllowIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_AllowIP", reflect.TypeOf((*MockStore)(nil).Update_User_AllowIP), arg0, arg1)
}

// Update_User_AllowIPToken mocks base method.
func (m *MockStore) Update_User_AllowIPToken(arg0 context.Context, arg1 sqlc.Update_User_AllowIPTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_AllowIPToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_AllowIPToken indicates an expected call of Update_User_AllowIPToken.
func (mr *MockStoreMockRecorder) Update_User_AllowIPToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_AllowIPToken", reflect.TypeOf((*MockStore)(nil).Update_User_AllowIPToken), arg0, arg1)
}

// Update_User_DeleteToken mocks base method.
func (m *MockStore) Update_User_DeleteToken(arg0 context.Context, arg1 sqlc.Update_User_DeleteTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_DeleteToken indicates an expected call of Update_User_DeleteToken.
func (mr *MockStoreMockRecorder) Update_User_DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_DeleteToken", reflect.TypeOf((*MockStore)(nil).Update_User_DeleteToken), arg0, arg1)
}

// Update_User_DeleteTokenTx mocks base method.
func (m *MockStore) Update_User_DeleteTokenTx(arg0 context.Context, arg1 sqlc.Update_User_DeleteTokenTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_DeleteTokenTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_DeleteTokenTx indicates an expected call of Update_User_DeleteTokenTx.
func (mr *MockStoreMockRecorder) Update_User_DeleteTokenTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_DeleteTokenTx", reflect.TypeOf((*MockStore)(nil).Update_User_DeleteTokenTx), arg0, arg1)
}

// Update_User_EmailChangeToken mocks base method.
func (m *MockStore) Update_User_EmailChangeToken(arg0 context.Context, arg1 sqlc.Update_User_EmailChangeTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_EmailChangeToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_EmailChangeToken indicates an expected call of Update_User_EmailChangeToken.
func (mr *MockStoreMockRecorder) Update_User_EmailChangeToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_EmailChangeToken", reflect.TypeOf((*MockStore)(nil).Update_User_EmailChangeToken), arg0, arg1)
}

// Update_User_EmailVerified mocks base method.
func (m *MockStore) Update_User_EmailVerified(arg0 context.Context, arg1 sqlc.Update_User_EmailVerifiedParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_EmailVerified", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_EmailVerified indicates an expected call of Update_User_EmailVerified.
func (mr *MockStoreMockRecorder) Update_User_EmailVerified(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_EmailVerified", reflect.TypeOf((*MockStore)(nil).Update_User_EmailVerified), arg0, arg1)
}

// Update_User_EmailVerifiedTx mocks base method.
func (m *MockStore) Update_User_EmailVerifiedTx(arg0 context.Context, arg1 sqlc.Update_User_EmailVerifiedTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_EmailVerifiedTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_EmailVerifiedTx indicates an expected call of Update_User_EmailVerifiedTx.
func (mr *MockStoreMockRecorder) Update_User_EmailVerifiedTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_EmailVerifiedTx", reflect.TypeOf((*MockStore)(nil).Update_User_EmailVerifiedTx), arg0, arg1)
}

// Update_User_RecoveryToken mocks base method.
func (m *MockStore) Update_User_RecoveryToken(arg0 context.Context, arg1 sqlc.Update_User_RecoveryTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_RecoveryToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_RecoveryToken indicates an expected call of Update_User_RecoveryToken.
func (mr *MockStoreMockRecorder) Update_User_RecoveryToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_RecoveryToken", reflect.TypeOf((*MockStore)(nil).Update_User_RecoveryToken), arg0, arg1)
}

// Update_User_RecoveryTokenTx mocks base method.
func (m *MockStore) Update_User_RecoveryTokenTx(arg0 context.Context, arg1 sqlc.Update_User_RecoveryTokenTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_RecoveryTokenTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_RecoveryTokenTx indicates an expected call of Update_User_RecoveryTokenTx.
func (mr *MockStoreMockRecorder) Update_User_RecoveryTokenTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_RecoveryTokenTx", reflect.TypeOf((*MockStore)(nil).Update_User_RecoveryTokenTx), arg0, arg1)
}

// Update_User_ResetPassword mocks base method.
func (m *MockStore) Update_User_ResetPassword(arg0 context.Context, arg1 sqlc.Update_User_ResetPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_ResetPassword indicates an expected call of Update_User_ResetPassword.
func (mr *MockStoreMockRecorder) Update_User_ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_ResetPassword", reflect.TypeOf((*MockStore)(nil).Update_User_ResetPassword), arg0, arg1)
}

// Update_User_ResetPasswordTx mocks base method.
func (m *MockStore) Update_User_ResetPasswordTx(arg0 context.Context, arg1 sqlc.Update_User_ResetPasswordTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_ResetPasswordTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_ResetPasswordTx indicates an expected call of Update_User_ResetPasswordTx.
func (mr *MockStoreMockRecorder) Update_User_ResetPasswordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_ResetPasswordTx", reflect.TypeOf((*MockStore)(nil).Update_User_ResetPasswordTx), arg0, arg1)
}

// Update_User_VerifyToken mocks base method.
func (m *MockStore) Update_User_VerifyToken(arg0 context.Context, arg1 sqlc.Update_User_VerifyTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_VerifyToken indicates an expected call of Update_User_VerifyToken.
func (mr *MockStoreMockRecorder) Update_User_VerifyToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_VerifyToken", reflect.TypeOf((*MockStore)(nil).Update_User_VerifyToken), arg0, arg1)
}

// Update_User_VerifyTokenTx mocks base method.
func (m *MockStore) Update_User_VerifyTokenTx(arg0 context.Context, arg1 sqlc.Update_User_VerifyTokenTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update_User_VerifyTokenTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update_User_VerifyTokenTx indicates an expected call of Update_User_VerifyTokenTx.
func (mr *MockStoreMockRecorder) Update_User_VerifyTokenTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update_User_VerifyTokenTx", reflect.TypeOf((*MockStore)(nil).Update_User_VerifyTokenTx), arg0, arg1)
}
