package db

import (
	"fmt"

	_ "github.com/go-sql-driver/mysql"
	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database"
	"github.com/golang-migrate/migrate/v4/database/mysql"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	"github.com/golang-migrate/migrate/v4/database/sqlite"
	"github.com/sirjager/trueauth/migrations"

	bindata "github.com/golang-migrate/migrate/v4/source/go_bindata"

	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
	_ "github.com/mattn/go-sqlite3"
)

// This function is performing database migrations using the `github.com/golang-migrate/migrate`
// package. It determines the database driver based on the `DBConfig.DBDriver` value, creates the
// corresponding migrate database driver instance, and then creates a new migrate instance with the
// provided database driver. It then applies any pending migrations to the database and logs the
// result.
func (d *Database) Migrate() (err error) {
	var driver database.Driver

	// Determine the database driver based on the DBConfig.DBDriver value.
	// Create the corresponding migrate database driver instance.
	switch d.config.Driver {
	case "postgres", "postgresql", "pg":
		driver, err = postgres.WithInstance(d.conn, &postgres.Config{})
	case "mysql":
		driver, err = mysql.WithInstance(d.conn, &mysql.Config{})
	case "sqlite", "sqlite3":
		driver, err = sqlite.WithInstance(d.conn, &sqlite.Config{})
	default:
		err = fmt.Errorf("'%s' is either not supported or not implemented", d.config.Driver)
	}
	if err != nil {
		return err
	}

	// Create a new migrate instance with the provided database driver.
	dbmigrate, err := migrate.NewWithDatabaseInstance(d.config.Migrate, d.config.Driver, driver)
	if err != nil {
		return err
	}

	// Apply any pending migrations to the database.
	err = dbmigrate.Up()
	if err != nil {
		// Check if the error is "no change" which indicates that there are no pending migrations.
		// Log an info message in this case.
		if err != migrate.ErrNoChange {
			return err
		}
		d.logr.Info().Msg("database migration is up to date")
	} else {
		d.logr.Info().Msg("database migration complete")
	}
	return nil
}

// This function is performing database migrations using the `go-bindata` package as the source driver.
// It creates a migration source using the binary data generated by the `migrations` package, and then
// creates a new migrate instance with the `go-bindata` source driver and the provided database URL. It
// then applies any pending migrations to the database and logs the result.
func (d *Database) MigrateUsingBindata() (err error) {
	// migration binary data
	migrationSource := bindata.Resource(migrations.AssetNames(),
		func(name string) ([]byte, error) {
			return migrations.Asset(name)
		})

	sourceDriver, err := bindata.WithInstance(migrationSource)
	if err != nil {
		d.logr.Fatal().Err(err).Msg("failed to create gobindata source driver instance")
	}

	dbmigrate, err := migrate.NewWithSourceInstance("go-bindata", sourceDriver, d.config.Url)
	if err != nil {
		return err
	}
	err = dbmigrate.Up()
	if err != nil {
		// Check if the error is "no change" which indicates that there are no pending migrations.
		// Log an info message in this case.
		if err != migrate.ErrNoChange {
			return err
		}
		d.logr.Info().Msg("database migration is up to date")
	} else {
		d.logr.Info().Msg("database migration complete")
	}

	return nil
}
