// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: sessions.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id, refresh_token, access_token_id, access_token, user_id, client_ip, user_agent,
    blocked, access_token_expires_at, refresh_token_expires_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	ID                    uuid.UUID `json:"id"`
	RefreshToken          string    `json:"refresh_token"`
	AccessTokenID         uuid.UUID `json:"access_token_id"`
	AccessToken           string    `json:"access_token"`
	UserID                uuid.UUID `json:"user_id"`
	ClientIp              string    `json:"client_ip"`
	UserAgent             string    `json:"user_agent"`
	Blocked               bool      `json:"blocked"`
	AccessTokenExpiresAt  time.Time `json:"access_token_expires_at"`
	RefreshTokenExpiresAt time.Time `json:"refresh_token_expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.RefreshToken,
		arg.AccessTokenID,
		arg.AccessToken,
		arg.UserID,
		arg.ClientIp,
		arg.UserAgent,
		arg.Blocked,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteSessionByUserID = `-- name: DeleteSessionByUserID :exec
DELETE FROM sessions WHERE user_id = $1
`

func (q *Queries) DeleteSessionByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSessionByUserID, userID)
	return err
}

const readSessionByAccessTokenID = `-- name: ReadSessionByAccessTokenID :one
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM sessions WHERE access_token_id = $1 LIMIT 1
`

func (q *Queries) ReadSessionByAccessTokenID(ctx context.Context, accessTokenID uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, readSessionByAccessTokenID, accessTokenID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readSessionByID = `-- name: ReadSessionByID :one
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM sessions WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, readSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.AccessTokenID,
		&i.AccessToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.UserID,
		&i.Blocked,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const readSessionsByUserID = `-- name: ReadSessionsByUserID :many
SELECT id, refresh_token, access_token_id, access_token, client_ip, user_agent, user_id, blocked, access_token_expires_at, refresh_token_expires_at, created_at, updated_at FROM sessions WHERE user_id = $1 LIMIT $3 OFFSET $2
`

type ReadSessionsByUserIDParams struct {
	UserID uuid.UUID     `json:"user_id"`
	Offset sql.NullInt32 `json:"offset"`
	Limit  sql.NullInt32 `json:"limit"`
}

func (q *Queries) ReadSessionsByUserID(ctx context.Context, arg ReadSessionsByUserIDParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, readSessionsByUserID, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.AccessTokenID,
			&i.AccessToken,
			&i.ClientIp,
			&i.UserAgent,
			&i.UserID,
			&i.Blocked,
			&i.AccessTokenExpiresAt,
			&i.RefreshTokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
