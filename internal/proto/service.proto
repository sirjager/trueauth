syntax = "proto3";

package trueauth;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "rpc-welcome.proto"; 
import "rpc-health.proto"; 
import "rpc-register.proto"; 
import "rpc-login.proto"; 
import "rpc-verify.proto"; 
import "rpc-refresh.proto"; 
import "rpc-logout.proto"; 
import "rpc-recovery.proto"; 
import "rpc-update.proto"; 
import "rpc-delete.proto"; 
import "rpc-allowip.proto"; 
import "rpc-users.proto"; 


 
option go_package = "github.com/sirjager/rpcs/trueauth";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: { 
        title: "TrueAuth Api";
        version: "0.1.0";
        contact: {
            name:   "SirJager";
            url: "https://github.com/sirjager/trueauth";
        };
    };
};

service TrueAuth {

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
        description: "True Auth is a standalone authentication gRPC and rest api"
        external_docs: {
            url: "https://github.com/sirjager/trueauth";
            description: "Find out more about TrueAuth";
        }
    };

    rpc Welcome(WelcomeRequest) returns (WelcomeResponse) {
        option (google.api.http) = {
            get: "/"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Returns welcome message";
            summary: "Welcome Message";
            tags: "System";
        };
    }

    rpc Health(HealthRequest) returns (HealthResponse) {
        option (google.api.http) = {
            get: "/v1/health"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Returns api health";
            summary: "Api Health";
            tags: "System";
        };
    }

    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Register User";
            summary: "Register User";
            tags: "Auth";
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Login User";
            summary: "Login User";
            tags: "Auth";
        };
    }

    rpc Verify(VerifyRequest) returns (VerifyResponse) {
        option (google.api.http) = {
            post: "/v1/verify"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Request and verify email";
            summary: "Request and verify email";
            tags: "Auth";
        };
    }

    rpc Logout(LogoutRequest) returns (LogoutResponse) {
        option (google.api.http) = {
            post: "/v1/logout"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Logout active sessions";
            summary: "Logout";
            tags: "Auth";
        };
    }
    
    rpc Refresh(RefreshRequest) returns (RefreshResponse) {
        option (google.api.http) = {
            post: "/v1/refresh"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Refresh access token";
            summary: "Refresh access token";
            tags: "Auth";
        };
    }

    rpc Recovery(RecoveryRequest) returns (RecoveryResponse) {
        option (google.api.http) = {
            post: "/v1/recovery"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get a password recovery code";
            summary: "Password recovery";
            tags: "Auth";
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            patch: "/v1/users"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Update user details";
            summary: "Update user";
            tags: "Auth";
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/users"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Request user deletion";
            summary: "Delete user";
            tags: "Auth";
        };
    }


    rpc AllowIP(AllowIPRequest) returns (AllowIPResponse) {
        option (google.api.http) = {
            get: "/v1/allowip"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Allow ip address";
            summary: "Allow ip address";
            tags: "Auth";
        };
    }

    rpc User(UserRequest) returns (UserResponse) {
        option (google.api.http) = {
            get: "/v1/users/{identity}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Get request user";
            summary: "Returns requested user";
            tags: "Users";
        };
    }
}
